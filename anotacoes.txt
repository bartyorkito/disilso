Pegando um commit especifico
    git history
    git cherry-pick <hash-do-commit>

Encontrar um estado especifico
    git bysect start <mostrando um ponto em que nao asta bom>
    git bysect good <mostrando um ponto que esta bom>
    ele encontra o ponto

Mostra o que esse commit realizou
    git show <hash-do-commit>\


encontrando responsavel por cada linha.
    Git blame <nome-do-arquivo>

gradicos do log
    git log --graph

#########################################################################################
## ESTRATEGIA DE BRANCH
#########################################################################################

limpando branch antigo
    git branch -D <nome-da-branch>

correcao de algo urgente, criar uma branch de hotfix
    git branch -b branch <nova-branch>
e depois fazer o merge na master
    git checkout master
    git merge <nova-branch>
e depois faze um nova tag
    git tag -a v0.2.0 -m "nova versao especifica adicionada"

ESSE PADRAO DE BRANCH EH CHAMADA DE GIT FLOW ( PESQUISAR NA INTERNET SOBRE )
A BRANCH DEVELOPMENT DEVE CONTER A JUNCAO DE TODAS AS BRANCHES DE FEATURES. DEPOIS DISSO TEMOS UMA BRANCH DE RELEASE.

Nesta aula, aprendemos:

Que é uma convenção bem seguida que a branch master tenha apenas os commits prontos para ir para produção;
Que não é interessante realizar trabalho e commitar diretamente na branch master;
Como remover uma branch:
git branch -d {nome_branch} remove uma branch que já tem seu trabalho unido à branch atual;
git branch -D {nome_branch} remove uma branch mesmo que os commits desta branch ainda não estejam na branch atual, ou seja, força a remoção;
Um pouco do processo chamado de Git Flow:
Entendemos que o estado do código representado pela branch master deve ser o mesmo que estará em produção
Vimos que deve haver uma branch de desenvolvimento (comumente chamado de develop), onde todas as funcionalidades e correções devem ser muito bem testadas antes de ir para produção (master)
Vimos que cada funcionalidade deve ser feita em uma branch separada, e que é comum que esta branch tenha feature/ como prefixo
Aprendemos também que bugs normalmente são corrigidos em branches separadas, com o prefixo hotfix/
Além disso, branches específicas para cada release são criadas para realizar os testes e correções de bugs específicos

ferramentas visuais
Que há ferramentas visuais que podem nos auxiliar com o trabalho com o Git;
O Git Cola foi uma das primeiras ferramentas visuais multiplataforma. Embora não seja a mais complexa ou visualmente atraente, é bem completa e pode nos ajudar bastante;
O GitHub Desktop pode ser interessante para gerenciar os projetos do GitHub de forma mais ágil e facilitada, sem a necessidade de acessar o site;
O GitKraken é uma ferramenta extremamente completa, que nos auxilia inclusive com a implementação do Git Flow.



#########################################################################################
## EVENTOS DO GIT  < GIT  HOOKS >
#########################################################################################
